version: '3'
services:
  openssl:
    image: cyberark/conjur
    container_name: openssl
    entrypoint:
     - openssl
     - req
     - -newkey
     - rsa:2048
     - -days
     - "365"
     - -nodes
     - -x509
     - -config
     - /tmp/conf/tls.conf
     - -extensions
     - v3_ca
     - -keyout
     - /tmp/conf/nginx.key
     - -out
     - /tmp/conf/nginx.crt
    volumes:
     - ./conjur-oss/conf/tls/:/tmp/conf
  postgres:
    image: postgres:12
    container_name: postgres_database
    environment:
      POSTGRES_HOST_AUTH_METHOD: password
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: SuperSecretPg
    ports:
      - 8432:5432
    networks:
      - conjur_network
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.com
      PGADMIN_DEFAULT_PASSWORD: SuperSecret
    ports:
      - 8081:80
    networks:
      - conjur_network
  conjur:
    image: cyberark/conjur
    container_name: conjur_server
    command: server
    environment:
      DATABASE_URL: postgres://postgres:SuperSecretPg@postgres/postgres
      CONJUR_DATA_KEY:
      CONJUR_AUTHENTICATORS:
    depends_on:
    - postgres
    restart: on-failure
    ports:
      - 8082:80
    networks:
      - conjur_network
  proxy:
    image: nginx
    container_name: nginx_proxy
    ports:
      - "8443:443"
    volumes:
      - ./conjur-oss/conf/:/etc/nginx/conf.d/:ro
      - ./conjur-oss/conf/tls/:/etc/nginx/tls/:ro
    depends_on:
    - conjur
    - openssl
    restart: on-failure
    networks:
      - conjur_network
  client:
    image: cyberark/conjur-cli:8
    container_name: conjur_cli
    depends_on: [ proxy ]
    entrypoint: sleep
    command: infinity
    volumes:
    - ./conjur-oss/conf/policy:/policy
    networks:
      - conjur_network

  # Ansible AWX compose configuration;
  awx_1:
    user: "501"
    image: "ghcr.io/ansible/awx_devel:devel"
    container_name: tools_awx_1
    hostname: awx_1
    command: launch_awx.sh
    environment:
      OS: " Operating System: Docker Desktop"
      SDB_HOST: 0.0.0.0
      SDB_PORT: 7899
      AWX_GROUP_QUEUES: tower
      MAIN_NODE_TYPE: "${MAIN_NODE_TYPE:-hybrid}"
      RECEPTORCTL_SOCKET: /var/run/awx-receptor/receptor.sock
      CONTROL_PLANE_NODE_COUNT: 1
      EXECUTION_NODE_COUNT: 0
      AWX_LOGGING_MODE: stdout
      DJANGO_SUPERUSER_PASSWORD: z
      UWSGI_MOUNT_PATH: /
      RUN_MIGRATIONS: 1
    depends_on:
      - postgres
    links:
      - redis_1
    working_dir: "/awx_devel"
    volumes:
      - "./ansible-awx/:/awx_devel"
      - "./ansible-awx/tools/docker-compose/supervisor.conf:/etc/supervisord.conf"
      - "./ansible-awx/tools/docker-compose/_sources/database.py:/etc/tower/conf.d/database.py"
      - "./ansible-awx/tools/docker-compose/_sources/websocket_secret.py:/etc/tower/conf.d/websocket_secret.py"
      - "./ansible-awx/tools/docker-compose/_sources/local_settings.py:/etc/tower/conf.d/local_settings.py"
      - "./ansible-awx/tools/docker-compose/_sources/nginx.conf:/etc/nginx/nginx.conf"
      - "./ansible-awx/tools/docker-compose/_sources/nginx.locations.conf:/etc/nginx/conf.d/nginx.locations.conf"
      - "./ansible-awx/tools/docker-compose/_sources/SECRET_KEY:/etc/tower/SECRET_KEY"
      - "./ansible-awx/tools/docker-compose/_sources/receptor/receptor-awx-1.conf:/etc/receptor/receptor.conf"
      - "./ansible-awx/tools/docker-compose/_sources/receptor/receptor-awx-1.conf.lock:/etc/receptor/receptor.conf.lock"
      - "/sys/fs/cgroup:/sys/fs/cgroup"
      - "~/.kube/config:/var/lib/awx/.kube/config"
      - "redis_socket_1:/var/run/redis/:rw"
    privileged: true
    tty: true
    ports:
      - "7899-7999:7899-7999"  # sdb-listen
      - "6899:6899"
      #      - "8080:8080"  # unused but mapped for debugging
      - "8888:8888"  # jupyter notebook
      - "8013:8013"  # http
      - "8043:8043"  # https
      - "2222:2222"  # receptor foo node
      - "3000:3001"  # used by the UI dev env
    networks:
      - conjur_network
  redis_1:
    image: redis:latest
    container_name: tools_redis_1
    volumes:
      - "./ansible-awx/tools/redis/redis.conf:/usr/local/etc/redis/redis.conf:Z"
      - "redis_socket_1:/var/run/redis/:rw"
    entrypoint: [ "redis-server" ]
    command: [ "/usr/local/etc/redis/redis.conf" ]
    networks:
      - conjur_network

volumes:
  awx_db:
    name: tools_awx_db
  redis_socket_1:
    name: tools_redis_socket_1

networks:
  conjur_network:
    driver: bridge
